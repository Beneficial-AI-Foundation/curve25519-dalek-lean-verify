-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [curve25519_dalek]: function definitions
import Aeneas
import Curve25519Dalek.Types
import Curve25519Dalek.FunsExternal
open Aeneas.Std Result Error
set_option linter.dupNamespace false
set_option linter.hashCommand false
set_option linter.unusedVariables false

namespace curve25519_dalek

/- Trait implementation: [subtle::{core::convert::From<u8> for subtle::Choice}]
   Source: '/home/oliver/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/subtle-2.6.1/src/lib.rs', lines 236:0-236:24
   Name pattern: [core::convert::From<subtle::Choice, u8>] -/
@[reducible]
def core.convert.FromsubtleChoiceU8 : core.convert.From subtle.Choice U8 := {
  from_ := subtle.FromsubtleChoiceU8.from
}

/- Trait implementation: [subtle::{subtle::ConditionallySelectable for u64}]
   Source: '/home/oliver/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/subtle-2.6.1/src/lib.rs', lines 511:8-537:10
   Name pattern: [subtle::ConditionallySelectable<u64>] -/
@[reducible]
def subtle.ConditionallySelectableU64 : subtle.ConditionallySelectable U64 := {
  coremarkerCopyInst := core.marker.CopyU64
  conditional_select := subtle.ConditionallySelectableU64.conditional_select
}

/- [curve25519_dalek::backend::serial::u64::constants::L]
   Source: 'curve25519-dalek/src/backend/serial/u64/constants.rs', lines 127:0-133:3 -/
@[global_simps]
def backend.serial.u64.constants.L_body
  : Result backend.serial.u64.scalar.Scalar52 :=
  ok
    (Array.make 5#usize [
      671914833335277#u64, 3916664325105025#u64, 1367801#u64, 0#u64,
      17592186044416#u64
      ])
@[global_simps, irreducible]
def backend.serial.u64.constants.L : backend.serial.u64.scalar.Scalar52 :=
  eval_global backend.serial.u64.constants.L_body

/- [curve25519_dalek::backend::serial::u64::constants::LFACTOR]
   Source: 'curve25519-dalek/src/backend/serial/u64/constants.rs', lines 136:0-136:48 -/
@[global_simps]
def backend.serial.u64.constants.LFACTOR_body : Result U64 :=
  ok 1439961107955227#u64
@[global_simps, irreducible]
def backend.serial.u64.constants.LFACTOR : U64 :=
  eval_global backend.serial.u64.constants.LFACTOR_body

/- [curve25519_dalek::backend::serial::u64::constants::RR]
   Source: 'curve25519-dalek/src/backend/serial/u64/constants.rs', lines 148:0-154:3 -/
@[global_simps]
def backend.serial.u64.constants.RR_body
  : Result backend.serial.u64.scalar.Scalar52 :=
  ok
    (Array.make 5#usize [
      2764609938444603#u64, 3768881411696287#u64, 1616719297148420#u64,
      1087343033131391#u64, 10175238647962#u64
      ])
@[global_simps, irreducible]
def backend.serial.u64.constants.RR : backend.serial.u64.scalar.Scalar52 :=
  eval_global backend.serial.u64.constants.RR_body

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::reduce::LOW_51_BIT_MASK]
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 291:8-291:54 -/
@[global_simps]
def backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK_body
  : Result U64 :=
  do
  let i ← 1#u64 <<< 51#i32
  i - 1#u64
@[global_simps, irreducible]
def backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK : U64 :=
  eval_global
    backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK_body

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::reduce]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 290:4-323:5 -/
def backend.serial.u64.field.FieldElement51.reduce
  (limbs : Array U64 5#usize) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  let i ← Array.index_usize limbs 0#usize
  let c0 ← i >>> 51#i32
  let i1 ← Array.index_usize limbs 1#usize
  let c1 ← i1 >>> 51#i32
  let i2 ← Array.index_usize limbs 2#usize
  let c2 ← i2 >>> 51#i32
  let i3 ← Array.index_usize limbs 3#usize
  let c3 ← i3 >>> 51#i32
  let i4 ← Array.index_usize limbs 4#usize
  let c4 ← i4 >>> 51#i32
  let i5 ←
    (↑(i &&& backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK)
      : Result U64)
  let limbs1 ← Array.update limbs 0#usize i5
  let i6 ← Array.index_usize limbs1 1#usize
  let i7 ←
    (↑(i6 &&& backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK)
      : Result U64)
  let limbs2 ← Array.update limbs1 1#usize i7
  let i8 ← Array.index_usize limbs2 2#usize
  let i9 ←
    (↑(i8 &&& backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK)
      : Result U64)
  let limbs3 ← Array.update limbs2 2#usize i9
  let i10 ← Array.index_usize limbs3 3#usize
  let i11 ←
    (↑(i10 &&&
      backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK) : Result
      U64)
  let limbs4 ← Array.update limbs3 3#usize i11
  let i12 ← Array.index_usize limbs4 4#usize
  let i13 ←
    (↑(i12 &&&
      backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK) : Result
      U64)
  let limbs5 ← Array.update limbs4 4#usize i13
  let i14 ← c4 * 19#u64
  let i15 ← Array.index_usize limbs5 0#usize
  let i16 ← i15 + i14
  let limbs6 ← Array.update limbs5 0#usize i16
  let i17 ← Array.index_usize limbs6 1#usize
  let i18 ← i17 + c0
  let limbs7 ← Array.update limbs6 1#usize i18
  let i19 ← Array.index_usize limbs7 2#usize
  let i20 ← i19 + c1
  let limbs8 ← Array.update limbs7 2#usize i20
  let i21 ← Array.index_usize limbs8 3#usize
  let i22 ← i21 + c2
  let limbs9 ← Array.update limbs8 3#usize i22
  let i23 ← Array.index_usize limbs9 4#usize
  let i24 ← i23 + c3
  let limbs10 ← Array.update limbs9 4#usize i24
  ok limbs10

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::from_bytes::load8_at]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 339:8-348:9 -/
def backend.serial.u64.field.FieldElement51.from_bytes.load8_at
  (input : Slice U8) (i : Usize) : Result U64 :=
  do
  let i1 ← Slice.index_usize input i
  let i2 ← (↑(UScalar.cast .U64 i1) : Result U64)
  let i3 ← i + 1#usize
  let i4 ← Slice.index_usize input i3
  let i5 ← (↑(UScalar.cast .U64 i4) : Result U64)
  let i6 ← i5 <<< 8#i32
  let i7 ← (↑(i2 ||| i6) : Result U64)
  let i8 ← i + 2#usize
  let i9 ← Slice.index_usize input i8
  let i10 ← (↑(UScalar.cast .U64 i9) : Result U64)
  let i11 ← i10 <<< 16#i32
  let i12 ← (↑(i7 ||| i11) : Result U64)
  let i13 ← i + 3#usize
  let i14 ← Slice.index_usize input i13
  let i15 ← (↑(UScalar.cast .U64 i14) : Result U64)
  let i16 ← i15 <<< 24#i32
  let i17 ← (↑(i12 ||| i16) : Result U64)
  let i18 ← i + 4#usize
  let i19 ← Slice.index_usize input i18
  let i20 ← (↑(UScalar.cast .U64 i19) : Result U64)
  let i21 ← i20 <<< 32#i32
  let i22 ← (↑(i17 ||| i21) : Result U64)
  let i23 ← i + 5#usize
  let i24 ← Slice.index_usize input i23
  let i25 ← (↑(UScalar.cast .U64 i24) : Result U64)
  let i26 ← i25 <<< 40#i32
  let i27 ← (↑(i22 ||| i26) : Result U64)
  let i28 ← i + 6#usize
  let i29 ← Slice.index_usize input i28
  let i30 ← (↑(UScalar.cast .U64 i29) : Result U64)
  let i31 ← i30 <<< 48#i32
  let i32 ← (↑(i27 ||| i31) : Result U64)
  let i33 ← i + 7#usize
  let i34 ← Slice.index_usize input i33
  let i35 ← (↑(UScalar.cast .U64 i34) : Result U64)
  let i36 ← i35 <<< 56#i32
  ok (i32 ||| i36)

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::from_bytes]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 338:4-363:5 -/
def backend.serial.u64.field.FieldElement51.from_bytes
  (bytes : Array U8 32#usize) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  let i ← 1#u64 <<< 51#i32
  let low_51_bit_mask ← i - 1#u64
  let s ← (↑(Array.to_slice bytes) : Result (Slice U8))
  let i1 ←
    backend.serial.u64.field.FieldElement51.from_bytes.load8_at s 0#usize
  let i2 ← (↑(i1 &&& low_51_bit_mask) : Result U64)
  let s1 ← (↑(Array.to_slice bytes) : Result (Slice U8))
  let i3 ←
    backend.serial.u64.field.FieldElement51.from_bytes.load8_at s1 6#usize
  let i4 ← i3 >>> 3#i32
  let i5 ← (↑(i4 &&& low_51_bit_mask) : Result U64)
  let s2 ← (↑(Array.to_slice bytes) : Result (Slice U8))
  let i6 ←
    backend.serial.u64.field.FieldElement51.from_bytes.load8_at s2 12#usize
  let i7 ← i6 >>> 6#i32
  let i8 ← (↑(i7 &&& low_51_bit_mask) : Result U64)
  let s3 ← (↑(Array.to_slice bytes) : Result (Slice U8))
  let i9 ←
    backend.serial.u64.field.FieldElement51.from_bytes.load8_at s3 19#usize
  let i10 ← i9 >>> 1#i32
  let i11 ← (↑(i10 &&& low_51_bit_mask) : Result U64)
  let s4 ← (↑(Array.to_slice bytes) : Result (Slice U8))
  let i12 ←
    backend.serial.u64.field.FieldElement51.from_bytes.load8_at s4 24#usize
  let i13 ← i12 >>> 12#i32
  let i14 ← (↑(i13 &&& low_51_bit_mask) : Result U64)
  ok (Array.make 5#usize [ i2, i5, i8, i11, i14 ])

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::to_bytes]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 374:4-456:5 -/
def backend.serial.u64.field.FieldElement51.to_bytes
  (self : backend.serial.u64.field.FieldElement51) :
  Result (Array U8 32#usize)
  :=
  do
  let fe ← backend.serial.u64.field.FieldElement51.reduce self
  let i ← Array.index_usize fe 0#usize
  let i1 ← i + 19#u64
  let q ← i1 >>> 51#i32
  let i2 ← Array.index_usize fe 1#usize
  let i3 ← i2 + q
  let q1 ← i3 >>> 51#i32
  let i4 ← Array.index_usize fe 2#usize
  let i5 ← i4 + q1
  let q2 ← i5 >>> 51#i32
  let i6 ← Array.index_usize fe 3#usize
  let i7 ← i6 + q2
  let q3 ← i7 >>> 51#i32
  let i8 ← Array.index_usize fe 4#usize
  let i9 ← i8 + q3
  let q4 ← i9 >>> 51#i32
  let i10 ← 19#u64 * q4
  let i11 ← i + i10
  let limbs ← Array.update fe 0#usize i11
  let i12 ← 1#u64 <<< 51#i32
  let low_51_bit_mask ← i12 - 1#u64
  let i13 ← Array.index_usize limbs 0#usize
  let i14 ← i13 >>> 51#i32
  let i15 ← Array.index_usize limbs 1#usize
  let i16 ← i15 + i14
  let limbs1 ← Array.update limbs 1#usize i16
  let i17 ← Array.index_usize limbs1 0#usize
  let i18 ← (↑(i17 &&& low_51_bit_mask) : Result U64)
  let limbs2 ← Array.update limbs1 0#usize i18
  let i19 ← Array.index_usize limbs2 1#usize
  let i20 ← i19 >>> 51#i32
  let i21 ← Array.index_usize limbs2 2#usize
  let i22 ← i21 + i20
  let limbs3 ← Array.update limbs2 2#usize i22
  let i23 ← Array.index_usize limbs3 1#usize
  let i24 ← (↑(i23 &&& low_51_bit_mask) : Result U64)
  let limbs4 ← Array.update limbs3 1#usize i24
  let i25 ← Array.index_usize limbs4 2#usize
  let i26 ← i25 >>> 51#i32
  let i27 ← Array.index_usize limbs4 3#usize
  let i28 ← i27 + i26
  let limbs5 ← Array.update limbs4 3#usize i28
  let i29 ← Array.index_usize limbs5 2#usize
  let i30 ← (↑(i29 &&& low_51_bit_mask) : Result U64)
  let limbs6 ← Array.update limbs5 2#usize i30
  let i31 ← Array.index_usize limbs6 3#usize
  let i32 ← i31 >>> 51#i32
  let i33 ← Array.index_usize limbs6 4#usize
  let i34 ← i33 + i32
  let limbs7 ← Array.update limbs6 4#usize i34
  let i35 ← Array.index_usize limbs7 3#usize
  let i36 ← (↑(i35 &&& low_51_bit_mask) : Result U64)
  let limbs8 ← Array.update limbs7 3#usize i36
  let i37 ← Array.index_usize limbs8 4#usize
  let i38 ← (↑(i37 &&& low_51_bit_mask) : Result U64)
  let limbs9 ← Array.update limbs8 4#usize i38
  let s := Array.repeat 32#usize 0#u8
  let i39 ← Array.index_usize limbs9 0#usize
  let i40 ← (↑(UScalar.cast .U8 i39) : Result U8)
  let s1 ← Array.update s 0#usize i40
  let i41 ← i39 >>> 8#i32
  let i42 ← (↑(UScalar.cast .U8 i41) : Result U8)
  let s2 ← Array.update s1 1#usize i42
  let i43 ← i39 >>> 16#i32
  let i44 ← (↑(UScalar.cast .U8 i43) : Result U8)
  let s3 ← Array.update s2 2#usize i44
  let i45 ← i39 >>> 24#i32
  let i46 ← (↑(UScalar.cast .U8 i45) : Result U8)
  let s4 ← Array.update s3 3#usize i46
  let i47 ← i39 >>> 32#i32
  let i48 ← (↑(UScalar.cast .U8 i47) : Result U8)
  let s5 ← Array.update s4 4#usize i48
  let i49 ← i39 >>> 40#i32
  let i50 ← (↑(UScalar.cast .U8 i49) : Result U8)
  let s6 ← Array.update s5 5#usize i50
  let i51 ← i39 >>> 48#i32
  let i52 ← Array.index_usize limbs9 1#usize
  let i53 ← i52 <<< 3#i32
  let i54 ← (↑(i51 ||| i53) : Result U64)
  let i55 ← (↑(UScalar.cast .U8 i54) : Result U8)
  let s7 ← Array.update s6 6#usize i55
  let i56 ← i52 >>> 5#i32
  let i57 ← (↑(UScalar.cast .U8 i56) : Result U8)
  let s8 ← Array.update s7 7#usize i57
  let i58 ← i52 >>> 13#i32
  let i59 ← (↑(UScalar.cast .U8 i58) : Result U8)
  let s9 ← Array.update s8 8#usize i59
  let i60 ← i52 >>> 21#i32
  let i61 ← (↑(UScalar.cast .U8 i60) : Result U8)
  let s10 ← Array.update s9 9#usize i61
  let i62 ← i52 >>> 29#i32
  let i63 ← (↑(UScalar.cast .U8 i62) : Result U8)
  let s11 ← Array.update s10 10#usize i63
  let i64 ← i52 >>> 37#i32
  let i65 ← (↑(UScalar.cast .U8 i64) : Result U8)
  let s12 ← Array.update s11 11#usize i65
  let i66 ← i52 >>> 45#i32
  let i67 ← Array.index_usize limbs9 2#usize
  let i68 ← i67 <<< 6#i32
  let i69 ← (↑(i66 ||| i68) : Result U64)
  let i70 ← (↑(UScalar.cast .U8 i69) : Result U8)
  let s13 ← Array.update s12 12#usize i70
  let i71 ← i67 >>> 2#i32
  let i72 ← (↑(UScalar.cast .U8 i71) : Result U8)
  let s14 ← Array.update s13 13#usize i72
  let i73 ← i67 >>> 10#i32
  let i74 ← (↑(UScalar.cast .U8 i73) : Result U8)
  let s15 ← Array.update s14 14#usize i74
  let i75 ← i67 >>> 18#i32
  let i76 ← (↑(UScalar.cast .U8 i75) : Result U8)
  let s16 ← Array.update s15 15#usize i76
  let i77 ← i67 >>> 26#i32
  let i78 ← (↑(UScalar.cast .U8 i77) : Result U8)
  let s17 ← Array.update s16 16#usize i78
  let i79 ← i67 >>> 34#i32
  let i80 ← (↑(UScalar.cast .U8 i79) : Result U8)
  let s18 ← Array.update s17 17#usize i80
  let i81 ← i67 >>> 42#i32
  let i82 ← (↑(UScalar.cast .U8 i81) : Result U8)
  let s19 ← Array.update s18 18#usize i82
  let i83 ← i67 >>> 50#i32
  let i84 ← Array.index_usize limbs9 3#usize
  let i85 ← i84 <<< 1#i32
  let i86 ← (↑(i83 ||| i85) : Result U64)
  let i87 ← (↑(UScalar.cast .U8 i86) : Result U8)
  let s20 ← Array.update s19 19#usize i87
  let i88 ← i84 >>> 7#i32
  let i89 ← (↑(UScalar.cast .U8 i88) : Result U8)
  let s21 ← Array.update s20 20#usize i89
  let i90 ← i84 >>> 15#i32
  let i91 ← (↑(UScalar.cast .U8 i90) : Result U8)
  let s22 ← Array.update s21 21#usize i91
  let i92 ← i84 >>> 23#i32
  let i93 ← (↑(UScalar.cast .U8 i92) : Result U8)
  let s23 ← Array.update s22 22#usize i93
  let i94 ← i84 >>> 31#i32
  let i95 ← (↑(UScalar.cast .U8 i94) : Result U8)
  let s24 ← Array.update s23 23#usize i95
  let i96 ← i84 >>> 39#i32
  let i97 ← (↑(UScalar.cast .U8 i96) : Result U8)
  let s25 ← Array.update s24 24#usize i97
  let i98 ← i84 >>> 47#i32
  let i99 ← Array.index_usize limbs9 4#usize
  let i100 ← i99 <<< 4#i32
  let i101 ← (↑(i98 ||| i100) : Result U64)
  let i102 ← (↑(UScalar.cast .U8 i101) : Result U8)
  let s26 ← Array.update s25 25#usize i102
  let i103 ← i99 >>> 4#i32
  let i104 ← (↑(UScalar.cast .U8 i103) : Result U8)
  let s27 ← Array.update s26 26#usize i104
  let i105 ← i99 >>> 12#i32
  let i106 ← (↑(UScalar.cast .U8 i105) : Result U8)
  let s28 ← Array.update s27 27#usize i106
  let i107 ← i99 >>> 20#i32
  let i108 ← (↑(UScalar.cast .U8 i107) : Result U8)
  let s29 ← Array.update s28 28#usize i108
  let i109 ← i99 >>> 28#i32
  let i110 ← (↑(UScalar.cast .U8 i109) : Result U8)
  let s30 ← Array.update s29 29#usize i110
  let i111 ← i99 >>> 36#i32
  let i112 ← (↑(UScalar.cast .U8 i111) : Result U8)
  let s31 ← Array.update s30 30#usize i112
  let i113 ← i99 >>> 44#i32
  let i114 ← (↑(UScalar.cast .U8 i113) : Result U8)
  let s32 ← Array.update s31 31#usize i114
  let i115 ← Array.index_usize s32 31#usize
  let i116 ← (↑(i115 &&& 128#u8) : Result U8)
  massert (i116 = 0#u8)
  ok s32

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::as_bytes]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 367:4-369:5 -/
def backend.serial.u64.field.FieldElement51.as_bytes
  (self : backend.serial.u64.field.FieldElement51) :
  Result (Array U8 32#usize)
  :=
  backend.serial.u64.field.FieldElement51.to_bytes self

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::pow2k::m]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 466:8-468:9 -/
def backend.serial.u64.field.FieldElement51.pow2k.m
  (x : U64) (y : U64) : Result U128 :=
  do
  let i ← (↑(UScalar.cast .U128 x) : Result U128)
  let i1 ← (↑(UScalar.cast .U128 y) : Result U128)
  i * i1

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::pow2k::LOW_51_BIT_MASK]
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 517:12-517:58 -/
@[global_simps]
def backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK_body
  : Result U64 :=
  do
  let i ← 1#u64 <<< 51#i32
  i - 1#u64
@[global_simps, irreducible]
def backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK : U64 :=
  eval_global
    backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK_body

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::pow2k]: loop 0:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 486:16-498:86 -/
def backend.serial.u64.field.FieldElement51.pow2k_loop
  (k : U32) (a : Array U64 5#usize) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  let i ← Array.index_usize a 3#usize
  let a3_19 ← 19#u64 * i
  let i1 ← Array.index_usize a 4#usize
  let a4_19 ← 19#u64 * i1
  let i2 ← Array.index_usize a 0#usize
  let i3 ← backend.serial.u64.field.FieldElement51.pow2k.m i2 i2
  let i4 ← Array.index_usize a 1#usize
  let i5 ← backend.serial.u64.field.FieldElement51.pow2k.m i4 a4_19
  let i6 ← Array.index_usize a 2#usize
  let i7 ← backend.serial.u64.field.FieldElement51.pow2k.m i6 a3_19
  let i8 ← i5 + i7
  let i9 ← 2#u128 * i8
  let c0 ← i3 + i9
  let i10 ← backend.serial.u64.field.FieldElement51.pow2k.m i a3_19
  let i11 ← backend.serial.u64.field.FieldElement51.pow2k.m i2 i4
  let i12 ← backend.serial.u64.field.FieldElement51.pow2k.m i6 a4_19
  let i13 ← i11 + i12
  let i14 ← 2#u128 * i13
  let c1 ← i10 + i14
  let i15 ← backend.serial.u64.field.FieldElement51.pow2k.m i4 i4
  let i16 ← backend.serial.u64.field.FieldElement51.pow2k.m i2 i6
  let i17 ← backend.serial.u64.field.FieldElement51.pow2k.m i1 a3_19
  let i18 ← i16 + i17
  let i19 ← 2#u128 * i18
  let c2 ← i15 + i19
  let i20 ← backend.serial.u64.field.FieldElement51.pow2k.m i1 a4_19
  let i21 ← backend.serial.u64.field.FieldElement51.pow2k.m i2 i
  let i22 ← backend.serial.u64.field.FieldElement51.pow2k.m i4 i6
  let i23 ← i21 + i22
  let i24 ← 2#u128 * i23
  let c3 ← i20 + i24
  let i25 ← backend.serial.u64.field.FieldElement51.pow2k.m i6 i6
  let i26 ← backend.serial.u64.field.FieldElement51.pow2k.m i2 i1
  let i27 ← backend.serial.u64.field.FieldElement51.pow2k.m i4 i
  let i28 ← i26 + i27
  let i29 ← 2#u128 * i28
  let c4 ← i25 + i29
  let i30 ← 1#u64 <<< 54#i32
  massert (i2 < i30)
  massert (i4 < i30)
  massert (i6 < i30)
  massert (i < i30)
  massert (i1 < i30)
  let i31 ← c0 >>> 51#i32
  let i32 ← (↑(UScalar.cast .U64 i31) : Result U64)
  let i33 ← (↑(UScalar.cast .U128 i32) : Result U128)
  let c11 ← c1 + i33
  let i34 ← (↑(UScalar.cast .U64 c0) : Result U64)
  let i35 ←
    (↑(i34 &&& backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK)
      : Result U64)
  let a1 ← Array.update a 0#usize i35
  let i36 ← c11 >>> 51#i32
  let i37 ← (↑(UScalar.cast .U64 i36) : Result U64)
  let i38 ← (↑(UScalar.cast .U128 i37) : Result U128)
  let c21 ← c2 + i38
  let i39 ← (↑(UScalar.cast .U64 c11) : Result U64)
  let i40 ←
    (↑(i39 &&& backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK)
      : Result U64)
  let a2 ← Array.update a1 1#usize i40
  let i41 ← c21 >>> 51#i32
  let i42 ← (↑(UScalar.cast .U64 i41) : Result U64)
  let i43 ← (↑(UScalar.cast .U128 i42) : Result U128)
  let c31 ← c3 + i43
  let i44 ← (↑(UScalar.cast .U64 c21) : Result U64)
  let i45 ←
    (↑(i44 &&& backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK)
      : Result U64)
  let a3 ← Array.update a2 2#usize i45
  let i46 ← c31 >>> 51#i32
  let i47 ← (↑(UScalar.cast .U64 i46) : Result U64)
  let i48 ← (↑(UScalar.cast .U128 i47) : Result U128)
  let c41 ← c4 + i48
  let i49 ← (↑(UScalar.cast .U64 c31) : Result U64)
  let i50 ←
    (↑(i49 &&& backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK)
      : Result U64)
  let a4 ← Array.update a3 3#usize i50
  let i51 ← c41 >>> 51#i32
  let carry ← (↑(UScalar.cast .U64 i51) : Result U64)
  let i52 ← (↑(UScalar.cast .U64 c41) : Result U64)
  let i53 ←
    (↑(i52 &&& backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK)
      : Result U64)
  let a5 ← Array.update a4 4#usize i53
  let i54 ← carry * 19#u64
  let i55 ← Array.index_usize a5 0#usize
  let i56 ← i55 + i54
  let a6 ← Array.update a5 0#usize i56
  let i57 ← Array.index_usize a6 0#usize
  let i58 ← i57 >>> 51#i32
  let i59 ← Array.index_usize a6 1#usize
  let i60 ← i59 + i58
  let a7 ← Array.update a6 1#usize i60
  let i61 ← Array.index_usize a7 0#usize
  let i62 ←
    (↑(i61 &&& backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK)
      : Result U64)
  let k1 ← k - 1#u32
  if k1 = 0#u32
  then do
       let a8 ← Array.update a7 0#usize i62
       ok a8
  else
    do
    let a8 ← Array.update a7 0#usize i62
    backend.serial.u64.field.FieldElement51.pow2k_loop k1 a8
partial_fixpoint

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::pow2k]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 460:4-565:5 -/
def backend.serial.u64.field.FieldElement51.pow2k
  (self : backend.serial.u64.field.FieldElement51) (k : U32) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  massert (k > 0#u32)
  backend.serial.u64.field.FieldElement51.pow2k_loop k self

/- [curve25519_dalek::backend::serial::u64::scalar::{core::ops::index::Index<usize, u64> for curve25519_dalek::backend::serial::u64::scalar::Scalar52}::index]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 43:4-45:5 -/
def
  backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
  (self : backend.serial.u64.scalar.Scalar52) (_index : Usize) : Result U64 :=
  Array.index_usize self _index

/- Trait implementation: [curve25519_dalek::backend::serial::u64::scalar::{core::ops::index::Index<usize, u64> for curve25519_dalek::backend::serial::u64::scalar::Scalar52}]
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 41:0-46:1 -/
@[reducible]
def core.ops.index.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64
  : core.ops.index.Index backend.serial.u64.scalar.Scalar52 Usize U64 := {
  index :=
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
}

/- [curve25519_dalek::backend::serial::u64::scalar::{core::ops::index::IndexMut<usize, u64> for curve25519_dalek::backend::serial::u64::scalar::Scalar52}::index_mut]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 49:4-51:5 -/
def
  backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
  (self : backend.serial.u64.scalar.Scalar52) (_index : Usize) :
  Result (U64 × (U64 → backend.serial.u64.scalar.Scalar52))
  :=
  do
  let (i, index_mut_back) ← Array.index_mut_usize self _index
  let back := fun ret => let a := index_mut_back ret
                         a
  ok (i, back)

/- Trait implementation: [curve25519_dalek::backend::serial::u64::scalar::{core::ops::index::IndexMut<usize, u64> for curve25519_dalek::backend::serial::u64::scalar::Scalar52}]
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 48:0-52:1 -/
@[reducible]
def
  core.ops.index.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64
  : core.ops.index.IndexMut backend.serial.u64.scalar.Scalar52 Usize U64 := {
  indexInst :=
    core.ops.index.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64
  index_mut :=
    backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
}

/- [curve25519_dalek::backend::serial::u64::scalar::m]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 56:0-58:1 -/
def backend.serial.u64.scalar.m (x : U64) (y : U64) : Result U128 :=
  do
  let i ← (↑(UScalar.cast .U128 x) : Result U128)
  let i1 ← (↑(UScalar.cast .U128 y) : Result U128)
  i * i1

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::ZERO]
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 62:4-62:57 -/
@[global_simps]
def backend.serial.u64.scalar.Scalar52.ZERO_body
  : Result backend.serial.u64.scalar.Scalar52 :=
  let a := Array.repeat 5#usize 0#u64
  ok a
@[global_simps, irreducible]
def backend.serial.u64.scalar.Scalar52.ZERO
  : backend.serial.u64.scalar.Scalar52 :=
  eval_global backend.serial.u64.scalar.Scalar52.ZERO_body

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::from_bytes]: loop 0:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 69:8-80:9 -/
def backend.serial.u64.scalar.Scalar52.from_bytes_loop
  (bytes : Array U8 32#usize) (words : Array U64 4#usize) (i : Usize) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  if i < 4#usize
  then
    do
    let base ← i * 8#usize
    let i1 ← Array.index_usize bytes base
    let i2 ← (↑(UScalar.cast .U64 i1) : Result U64)
    let i3 ← base + 1#usize
    let i4 ← Array.index_usize bytes i3
    let i5 ← (↑(UScalar.cast .U64 i4) : Result U64)
    let i6 ← i5 <<< 8#i32
    let i7 ← (↑(i2 ||| i6) : Result U64)
    let i8 ← base + 2#usize
    let i9 ← Array.index_usize bytes i8
    let i10 ← (↑(UScalar.cast .U64 i9) : Result U64)
    let i11 ← i10 <<< 16#i32
    let i12 ← (↑(i7 ||| i11) : Result U64)
    let i13 ← base + 3#usize
    let i14 ← Array.index_usize bytes i13
    let i15 ← (↑(UScalar.cast .U64 i14) : Result U64)
    let i16 ← i15 <<< 24#i32
    let i17 ← (↑(i12 ||| i16) : Result U64)
    let i18 ← base + 4#usize
    let i19 ← Array.index_usize bytes i18
    let i20 ← (↑(UScalar.cast .U64 i19) : Result U64)
    let i21 ← i20 <<< 32#i32
    let i22 ← (↑(i17 ||| i21) : Result U64)
    let i23 ← base + 5#usize
    let i24 ← Array.index_usize bytes i23
    let i25 ← (↑(UScalar.cast .U64 i24) : Result U64)
    let i26 ← i25 <<< 40#i32
    let i27 ← (↑(i22 ||| i26) : Result U64)
    let i28 ← base + 6#usize
    let i29 ← Array.index_usize bytes i28
    let i30 ← (↑(UScalar.cast .U64 i29) : Result U64)
    let i31 ← i30 <<< 48#i32
    let i32 ← (↑(i27 ||| i31) : Result U64)
    let i33 ← base + 7#usize
    let i34 ← Array.index_usize bytes i33
    let i35 ← (↑(UScalar.cast .U64 i34) : Result U64)
    let i36 ← i35 <<< 56#i32
    let i37 ← (↑(i32 ||| i36) : Result U64)
    let words1 ← Array.update words i i37
    let i38 ← i + 1#usize
    backend.serial.u64.scalar.Scalar52.from_bytes_loop bytes words1 i38
  else
    do
    let i1 ← 1#u64 <<< 52#i32
    let mask ← i1 - 1#u64
    let i2 ← 1#u64 <<< 48#i32
    let top_mask ← i2 - 1#u64
    let i3 ← Array.index_usize words 0#usize
    let (_, index_mut_back) ←
      backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
        backend.serial.u64.scalar.Scalar52.ZERO 0#usize
    let i4 ← (↑(i3 &&& mask) : Result U64)
    let i5 ← i3 >>> 52#i32
    let i6 ← Array.index_usize words 1#usize
    let i7 ← i6 <<< 12#i32
    let i8 ← (↑(i5 ||| i7) : Result U64)
    let s := index_mut_back i4
    let (_, index_mut_back1) ←
      backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
        s 1#usize
    let i9 ← (↑(i8 &&& mask) : Result U64)
    let i10 ← i6 >>> 40#i32
    let i11 ← Array.index_usize words 2#usize
    let i12 ← i11 <<< 24#i32
    let i13 ← (↑(i10 ||| i12) : Result U64)
    let s1 := index_mut_back1 i9
    let (_, index_mut_back2) ←
      backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
        s1 2#usize
    let i14 ← (↑(i13 &&& mask) : Result U64)
    let i15 ← i11 >>> 28#i32
    let i16 ← Array.index_usize words 3#usize
    let i17 ← i16 <<< 36#i32
    let i18 ← (↑(i15 ||| i17) : Result U64)
    let s2 := index_mut_back2 i14
    let (_, index_mut_back3) ←
      backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
        s2 3#usize
    let i19 ← (↑(i18 &&& mask) : Result U64)
    let i20 ← i16 >>> 16#i32
    let s3 := index_mut_back3 i19
    let (_, index_mut_back4) ←
      backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
        s3 4#usize
    let i21 ← (↑(i20 &&& top_mask) : Result U64)
    ok (index_mut_back4 i21)
partial_fixpoint

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::from_bytes]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 66:4-93:5 -/
def backend.serial.u64.scalar.Scalar52.from_bytes
  (bytes : Array U8 32#usize) : Result backend.serial.u64.scalar.Scalar52 :=
  let words := Array.repeat 4#usize 0#u64
  backend.serial.u64.scalar.Scalar52.from_bytes_loop bytes words 0#usize

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::to_bytes]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 137:4-174:5 -/
def backend.serial.u64.scalar.Scalar52.to_bytes
  (self : backend.serial.u64.scalar.Scalar52) : Result (Array U8 32#usize) :=
  do
  let s := Array.repeat 32#usize 0#u8
  let i ← Array.index_usize self 0#usize
  let i1 ← i >>> 0#i32
  let i2 ← (↑(UScalar.cast .U8 i1) : Result U8)
  let s1 ← Array.update s 0#usize i2
  let i3 ← i >>> 8#i32
  let i4 ← (↑(UScalar.cast .U8 i3) : Result U8)
  let s2 ← Array.update s1 1#usize i4
  let i5 ← i >>> 16#i32
  let i6 ← (↑(UScalar.cast .U8 i5) : Result U8)
  let s3 ← Array.update s2 2#usize i6
  let i7 ← i >>> 24#i32
  let i8 ← (↑(UScalar.cast .U8 i7) : Result U8)
  let s4 ← Array.update s3 3#usize i8
  let i9 ← i >>> 32#i32
  let i10 ← (↑(UScalar.cast .U8 i9) : Result U8)
  let s5 ← Array.update s4 4#usize i10
  let i11 ← i >>> 40#i32
  let i12 ← (↑(UScalar.cast .U8 i11) : Result U8)
  let s6 ← Array.update s5 5#usize i12
  let i13 ← i >>> 48#i32
  let i14 ← Array.index_usize self 1#usize
  let i15 ← i14 <<< 4#i32
  let i16 ← (↑(i13 ||| i15) : Result U64)
  let i17 ← (↑(UScalar.cast .U8 i16) : Result U8)
  let s7 ← Array.update s6 6#usize i17
  let i18 ← i14 >>> 4#i32
  let i19 ← (↑(UScalar.cast .U8 i18) : Result U8)
  let s8 ← Array.update s7 7#usize i19
  let i20 ← i14 >>> 12#i32
  let i21 ← (↑(UScalar.cast .U8 i20) : Result U8)
  let s9 ← Array.update s8 8#usize i21
  let i22 ← i14 >>> 20#i32
  let i23 ← (↑(UScalar.cast .U8 i22) : Result U8)
  let s10 ← Array.update s9 9#usize i23
  let i24 ← i14 >>> 28#i32
  let i25 ← (↑(UScalar.cast .U8 i24) : Result U8)
  let s11 ← Array.update s10 10#usize i25
  let i26 ← i14 >>> 36#i32
  let i27 ← (↑(UScalar.cast .U8 i26) : Result U8)
  let s12 ← Array.update s11 11#usize i27
  let i28 ← i14 >>> 44#i32
  let i29 ← (↑(UScalar.cast .U8 i28) : Result U8)
  let s13 ← Array.update s12 12#usize i29
  let i30 ← Array.index_usize self 2#usize
  let i31 ← i30 >>> 0#i32
  let i32 ← (↑(UScalar.cast .U8 i31) : Result U8)
  let s14 ← Array.update s13 13#usize i32
  let i33 ← i30 >>> 8#i32
  let i34 ← (↑(UScalar.cast .U8 i33) : Result U8)
  let s15 ← Array.update s14 14#usize i34
  let i35 ← i30 >>> 16#i32
  let i36 ← (↑(UScalar.cast .U8 i35) : Result U8)
  let s16 ← Array.update s15 15#usize i36
  let i37 ← i30 >>> 24#i32
  let i38 ← (↑(UScalar.cast .U8 i37) : Result U8)
  let s17 ← Array.update s16 16#usize i38
  let i39 ← i30 >>> 32#i32
  let i40 ← (↑(UScalar.cast .U8 i39) : Result U8)
  let s18 ← Array.update s17 17#usize i40
  let i41 ← i30 >>> 40#i32
  let i42 ← (↑(UScalar.cast .U8 i41) : Result U8)
  let s19 ← Array.update s18 18#usize i42
  let i43 ← i30 >>> 48#i32
  let i44 ← Array.index_usize self 3#usize
  let i45 ← i44 <<< 4#i32
  let i46 ← (↑(i43 ||| i45) : Result U64)
  let i47 ← (↑(UScalar.cast .U8 i46) : Result U8)
  let s20 ← Array.update s19 19#usize i47
  let i48 ← i44 >>> 4#i32
  let i49 ← (↑(UScalar.cast .U8 i48) : Result U8)
  let s21 ← Array.update s20 20#usize i49
  let i50 ← i44 >>> 12#i32
  let i51 ← (↑(UScalar.cast .U8 i50) : Result U8)
  let s22 ← Array.update s21 21#usize i51
  let i52 ← i44 >>> 20#i32
  let i53 ← (↑(UScalar.cast .U8 i52) : Result U8)
  let s23 ← Array.update s22 22#usize i53
  let i54 ← i44 >>> 28#i32
  let i55 ← (↑(UScalar.cast .U8 i54) : Result U8)
  let s24 ← Array.update s23 23#usize i55
  let i56 ← i44 >>> 36#i32
  let i57 ← (↑(UScalar.cast .U8 i56) : Result U8)
  let s25 ← Array.update s24 24#usize i57
  let i58 ← i44 >>> 44#i32
  let i59 ← (↑(UScalar.cast .U8 i58) : Result U8)
  let s26 ← Array.update s25 25#usize i59
  let i60 ← Array.index_usize self 4#usize
  let i61 ← i60 >>> 0#i32
  let i62 ← (↑(UScalar.cast .U8 i61) : Result U8)
  let s27 ← Array.update s26 26#usize i62
  let i63 ← i60 >>> 8#i32
  let i64 ← (↑(UScalar.cast .U8 i63) : Result U8)
  let s28 ← Array.update s27 27#usize i64
  let i65 ← i60 >>> 16#i32
  let i66 ← (↑(UScalar.cast .U8 i65) : Result U8)
  let s29 ← Array.update s28 28#usize i66
  let i67 ← i60 >>> 24#i32
  let i68 ← (↑(UScalar.cast .U8 i67) : Result U8)
  let s30 ← Array.update s29 29#usize i68
  let i69 ← i60 >>> 32#i32
  let i70 ← (↑(UScalar.cast .U8 i69) : Result U8)
  let s31 ← Array.update s30 30#usize i70
  let i71 ← i60 >>> 40#i32
  let i72 ← (↑(UScalar.cast .U8 i71) : Result U8)
  Array.update s31 31#usize i72

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::conditional_add_l]: loop 0:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 216:8-221:9 -/
def backend.serial.u64.scalar.Scalar52.conditional_add_l_loop
  (self : backend.serial.u64.scalar.Scalar52) (condition : subtle.Choice)
  (carry : U64) (mask : U64) (i : Usize) :
  Result (U64 × backend.serial.u64.scalar.Scalar52)
  :=
  if i < 5#usize
  then
    do
    let i1 ←
      backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
        backend.serial.u64.constants.L i
    let addend ←
      subtle.ConditionallySelectableU64.conditional_select 0#u64 i1 condition
    let i2 ← carry >>> 52#i32
    let i3 ←
      backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
        self i
    let i4 ← i2 + i3
    let carry1 ← i4 + addend
    let (_, index_mut_back) ←
      backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
        self i
    let i5 ← (↑(carry1 &&& mask) : Result U64)
    let i6 ← i + 1#usize
    let self1 := index_mut_back i5
    backend.serial.u64.scalar.Scalar52.conditional_add_l_loop self1 condition
      carry1 mask i6
  else ok (carry, self)
partial_fixpoint

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::conditional_add_l]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 211:4-224:5 -/
def backend.serial.u64.scalar.Scalar52.conditional_add_l
  (self : backend.serial.u64.scalar.Scalar52) (condition : subtle.Choice) :
  Result (U64 × backend.serial.u64.scalar.Scalar52)
  :=
  do
  let i ← 1#u64 <<< 52#i32
  let mask ← i - 1#u64
  backend.serial.u64.scalar.Scalar52.conditional_add_l_loop self condition
    0#u64 mask 0#usize

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::sub]: loop 0:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 200:8-204:9 -/
def backend.serial.u64.scalar.Scalar52.sub_loop
  (a : backend.serial.u64.scalar.Scalar52)
  (b : backend.serial.u64.scalar.Scalar52)
  (difference : backend.serial.u64.scalar.Scalar52) (mask : U64) (borrow : U64)
  (i : Usize) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  if i < 5#usize
  then
    do
    let i1 ←
      backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
        a i
    let i2 ←
      backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
        b i
    let i3 ← borrow >>> 63#i32
    let i4 ← i2 + i3
    let borrow1 ← (↑(core.num.U64.wrapping_sub i1 i4) : Result U64)
    let (_, index_mut_back) ←
      backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
        difference i
    let i5 ← (↑(borrow1 &&& mask) : Result U64)
    let i6 ← i + 1#usize
    let difference1 := index_mut_back i5
    backend.serial.u64.scalar.Scalar52.sub_loop a b difference1 mask borrow1 i6
  else
    do
    let i1 ← borrow >>> 63#i32
    let i2 ← (↑(UScalar.cast .U8 i1) : Result U8)
    let c ← subtle.FromsubtleChoiceU8.from i2
    let (_, difference1) ←
      backend.serial.u64.scalar.Scalar52.conditional_add_l difference c
    ok difference1
partial_fixpoint

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::sub]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 193:4-209:5 -/
def backend.serial.u64.scalar.Scalar52.sub
  (a : backend.serial.u64.scalar.Scalar52)
  (b : backend.serial.u64.scalar.Scalar52) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  do
  let i ← 1#u64 <<< 52#i32
  let mask ← i - 1#u64
  backend.serial.u64.scalar.Scalar52.sub_loop a b
    backend.serial.u64.scalar.Scalar52.ZERO mask 0#u64 0#usize

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::mul_internal]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 229:4-243:5 -/
def backend.serial.u64.scalar.Scalar52.mul_internal
  (a : backend.serial.u64.scalar.Scalar52)
  (b : backend.serial.u64.scalar.Scalar52) :
  Result (Array U128 9#usize)
  :=
  do
  let z := Array.repeat 9#usize 0#u128
  let i ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 0#usize
  let i1 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      b 0#usize
  let i2 ← backend.serial.u64.scalar.m i i1
  let z1 ← Array.update z 0#usize i2
  let i3 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      b 1#usize
  let i4 ← backend.serial.u64.scalar.m i i3
  let i5 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 1#usize
  let i6 ← backend.serial.u64.scalar.m i5 i1
  let i7 ← i4 + i6
  let z2 ← Array.update z1 1#usize i7
  let i8 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      b 2#usize
  let i9 ← backend.serial.u64.scalar.m i i8
  let i10 ← backend.serial.u64.scalar.m i5 i3
  let i11 ← i9 + i10
  let i12 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 2#usize
  let i13 ← backend.serial.u64.scalar.m i12 i1
  let i14 ← i11 + i13
  let z3 ← Array.update z2 2#usize i14
  let i15 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      b 3#usize
  let i16 ← backend.serial.u64.scalar.m i i15
  let i17 ← backend.serial.u64.scalar.m i5 i8
  let i18 ← i16 + i17
  let i19 ← backend.serial.u64.scalar.m i12 i3
  let i20 ← i18 + i19
  let i21 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 3#usize
  let i22 ← backend.serial.u64.scalar.m i21 i1
  let i23 ← i20 + i22
  let z4 ← Array.update z3 3#usize i23
  let i24 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      b 4#usize
  let i25 ← backend.serial.u64.scalar.m i i24
  let i26 ← backend.serial.u64.scalar.m i5 i15
  let i27 ← i25 + i26
  let i28 ← backend.serial.u64.scalar.m i12 i8
  let i29 ← i27 + i28
  let i30 ← backend.serial.u64.scalar.m i21 i3
  let i31 ← i29 + i30
  let i32 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 4#usize
  let i33 ← backend.serial.u64.scalar.m i32 i1
  let i34 ← i31 + i33
  let z5 ← Array.update z4 4#usize i34
  let i35 ← backend.serial.u64.scalar.m i5 i24
  let i36 ← backend.serial.u64.scalar.m i12 i15
  let i37 ← i35 + i36
  let i38 ← backend.serial.u64.scalar.m i21 i8
  let i39 ← i37 + i38
  let i40 ← backend.serial.u64.scalar.m i32 i3
  let i41 ← i39 + i40
  let z6 ← Array.update z5 5#usize i41
  let i42 ← backend.serial.u64.scalar.m i12 i24
  let i43 ← backend.serial.u64.scalar.m i21 i15
  let i44 ← i42 + i43
  let i45 ← backend.serial.u64.scalar.m i32 i8
  let i46 ← i44 + i45
  let z7 ← Array.update z6 6#usize i46
  let i47 ← backend.serial.u64.scalar.m i21 i24
  let i48 ← backend.serial.u64.scalar.m i32 i15
  let i49 ← i47 + i48
  let z8 ← Array.update z7 7#usize i49
  let i50 ← backend.serial.u64.scalar.m i32 i24
  Array.update z8 8#usize i50

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::square_internal]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 248:4-267:5 -/
def backend.serial.u64.scalar.Scalar52.square_internal
  (a : backend.serial.u64.scalar.Scalar52) : Result (Array U128 9#usize) :=
  do
  let i ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 0#usize
  let i1 ← i * 2#u64
  let i2 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 1#usize
  let i3 ← i2 * 2#u64
  let i4 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 2#usize
  let i5 ← i4 * 2#u64
  let i6 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 3#usize
  let i7 ← i6 * 2#u64
  let i8 ← backend.serial.u64.scalar.m i i
  let i9 ← Array.index_usize (Array.make 4#usize [ i1, i3, i5, i7 ]) 0#usize
  let i10 ← backend.serial.u64.scalar.m i9 i2
  let i11 ← backend.serial.u64.scalar.m i9 i4
  let i12 ← backend.serial.u64.scalar.m i2 i2
  let i13 ← i11 + i12
  let i14 ← backend.serial.u64.scalar.m i9 i6
  let i15 ← Array.index_usize (Array.make 4#usize [ i1, i3, i5, i7 ]) 1#usize
  let i16 ← backend.serial.u64.scalar.m i15 i4
  let i17 ← i14 + i16
  let i18 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 4#usize
  let i19 ← backend.serial.u64.scalar.m i9 i18
  let i20 ← backend.serial.u64.scalar.m i15 i6
  let i21 ← i19 + i20
  let i22 ← backend.serial.u64.scalar.m i4 i4
  let i23 ← i21 + i22
  let i24 ← backend.serial.u64.scalar.m i15 i18
  let i25 ← Array.index_usize (Array.make 4#usize [ i1, i3, i5, i7 ]) 2#usize
  let i26 ← backend.serial.u64.scalar.m i25 i6
  let i27 ← i24 + i26
  let i28 ← backend.serial.u64.scalar.m i25 i18
  let i29 ← backend.serial.u64.scalar.m i6 i6
  let i30 ← i28 + i29
  let i31 ← Array.index_usize (Array.make 4#usize [ i1, i3, i5, i7 ]) 3#usize
  let i32 ← backend.serial.u64.scalar.m i31 i18
  let i33 ← backend.serial.u64.scalar.m i18 i18
  ok (Array.make 9#usize [ i8, i10, i13, i17, i23, i27, i30, i32, i33 ])

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::montgomery_reduce::part1]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 275:8-278:9 -/
def backend.serial.u64.scalar.Scalar52.montgomery_reduce.part1
  (sum : U128) : Result (U128 × U64) :=
  do
  let i ← (↑(UScalar.cast .U64 sum) : Result U64)
  let i1 ←
    (↑(core.num.U64.wrapping_mul i backend.serial.u64.constants.LFACTOR) :
      Result U64)
  let i2 ← 1#u64 <<< 52#i32
  let i3 ← i2 - 1#u64
  let p ← (↑(i1 &&& i3) : Result U64)
  let i4 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      backend.serial.u64.constants.L 0#usize
  let i5 ← backend.serial.u64.scalar.m p i4
  let i6 ← sum + i5
  let i7 ← i6 >>> 52#i32
  ok (i7, p)

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::montgomery_reduce::part2]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 281:8-284:9 -/
def backend.serial.u64.scalar.Scalar52.montgomery_reduce.part2
  (sum : U128) : Result (U128 × U64) :=
  do
  let i ← (↑(UScalar.cast .U64 sum) : Result U64)
  let i1 ← 1#u64 <<< 52#i32
  let i2 ← i1 - 1#u64
  let w ← (↑(i &&& i2) : Result U64)
  let i3 ← sum >>> 52#i32
  ok (i3, w)

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::montgomery_reduce]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 272:4-305:5 -/
def backend.serial.u64.scalar.Scalar52.montgomery_reduce
  (limbs : Array U128 9#usize) : Result backend.serial.u64.scalar.Scalar52 :=
  do
  let i ← Array.index_usize limbs 0#usize
  let (carry, n0) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part1 i
  let i1 ← Array.index_usize limbs 1#usize
  let i2 ← carry + i1
  let i3 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      backend.serial.u64.constants.L 1#usize
  let i4 ← backend.serial.u64.scalar.m n0 i3
  let i5 ← i2 + i4
  let (carry1, n1) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part1 i5
  let i6 ← Array.index_usize limbs 2#usize
  let i7 ← carry1 + i6
  let i8 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      backend.serial.u64.constants.L 2#usize
  let i9 ← backend.serial.u64.scalar.m n0 i8
  let i10 ← i7 + i9
  let i11 ← backend.serial.u64.scalar.m n1 i3
  let i12 ← i10 + i11
  let (carry2, n2) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part1 i12
  let i13 ← Array.index_usize limbs 3#usize
  let i14 ← carry2 + i13
  let i15 ← backend.serial.u64.scalar.m n1 i8
  let i16 ← i14 + i15
  let i17 ← backend.serial.u64.scalar.m n2 i3
  let i18 ← i16 + i17
  let (carry3, n3) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part1 i18
  let i19 ← Array.index_usize limbs 4#usize
  let i20 ← carry3 + i19
  let i21 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      backend.serial.u64.constants.L 4#usize
  let i22 ← backend.serial.u64.scalar.m n0 i21
  let i23 ← i20 + i22
  let i24 ← backend.serial.u64.scalar.m n2 i8
  let i25 ← i23 + i24
  let i26 ← backend.serial.u64.scalar.m n3 i3
  let i27 ← i25 + i26
  let (carry4, n4) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part1 i27
  let i28 ← Array.index_usize limbs 5#usize
  let i29 ← carry4 + i28
  let i30 ← backend.serial.u64.scalar.m n1 i21
  let i31 ← i29 + i30
  let i32 ← backend.serial.u64.scalar.m n3 i8
  let i33 ← i31 + i32
  let i34 ← backend.serial.u64.scalar.m n4 i3
  let i35 ← i33 + i34
  let (carry5, r0) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part2 i35
  let i36 ← Array.index_usize limbs 6#usize
  let i37 ← carry5 + i36
  let i38 ← backend.serial.u64.scalar.m n2 i21
  let i39 ← i37 + i38
  let i40 ← backend.serial.u64.scalar.m n4 i8
  let i41 ← i39 + i40
  let (carry6, r1) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part2 i41
  let i42 ← Array.index_usize limbs 7#usize
  let i43 ← carry6 + i42
  let i44 ← backend.serial.u64.scalar.m n3 i21
  let i45 ← i43 + i44
  let (carry7, r2) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part2 i45
  let i46 ← Array.index_usize limbs 8#usize
  let i47 ← carry7 + i46
  let i48 ← backend.serial.u64.scalar.m n4 i21
  let i49 ← i47 + i48
  let (carry8, r3) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part2 i49
  let r4 ← (↑(UScalar.cast .U64 carry8) : Result U64)
  backend.serial.u64.scalar.Scalar52.sub
    (Array.make 5#usize [ r0, r1, r2, r3, r4 ]) backend.serial.u64.constants.L

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::montgomery_mul]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 324:4-326:5 -/
def backend.serial.u64.scalar.Scalar52.montgomery_mul
  (a : backend.serial.u64.scalar.Scalar52)
  (b : backend.serial.u64.scalar.Scalar52) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  do
  let a1 ← backend.serial.u64.scalar.Scalar52.mul_internal a b
  backend.serial.u64.scalar.Scalar52.montgomery_reduce a1

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::montgomery_square]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 330:4-332:5 -/
def backend.serial.u64.scalar.Scalar52.montgomery_square
  (self : backend.serial.u64.scalar.Scalar52) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  do
  let a ← backend.serial.u64.scalar.Scalar52.square_internal self
  backend.serial.u64.scalar.Scalar52.montgomery_reduce a

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::as_montgomery]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 336:4-338:5 -/
def backend.serial.u64.scalar.Scalar52.as_montgomery
  (self : backend.serial.u64.scalar.Scalar52) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  backend.serial.u64.scalar.Scalar52.montgomery_mul self
    backend.serial.u64.constants.RR

/- [curve25519_dalek::scalar::{curve25519_dalek::scalar::Scalar}::ZERO]
   Source: 'curve25519-dalek/src/scalar.rs', lines 564:4-564:53 -/
@[global_simps]
def scalar.Scalar.ZERO_body : Result scalar.Scalar :=
  let a := Array.repeat 32#usize 0#u8
  ok { bytes := a }
@[global_simps, irreducible]
def scalar.Scalar.ZERO : scalar.Scalar := eval_global scalar.Scalar.ZERO_body

/- [curve25519_dalek::scalar::{curve25519_dalek::scalar::Scalar}::ONE]
   Source: 'curve25519-dalek/src/scalar.rs', lines 567:4-572:6 -/
@[global_simps]
def scalar.Scalar.ONE_body : Result scalar.Scalar :=
  ok
    {
      bytes :=
        (Array.make 32#usize [
          1#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8,
          0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8,
          0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8
          ])
    }
@[global_simps, irreducible]
def scalar.Scalar.ONE : scalar.Scalar := eval_global scalar.Scalar.ONE_body

/- [curve25519_dalek::scalar::{curve25519_dalek::scalar::Scalar}::to_bytes]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 691:4-693:5 -/
def scalar.Scalar.to_bytes
  (self : scalar.Scalar) : Result (Array U8 32#usize) :=
  ok self.bytes

/- [curve25519_dalek::scalar::{curve25519_dalek::scalar::Scalar}::as_bytes]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 706:4-708:5 -/
def scalar.Scalar.as_bytes
  (self : scalar.Scalar) : Result (Array U8 32#usize) :=
  ok self.bytes

/- [curve25519_dalek::scalar::{curve25519_dalek::scalar::Scalar}::unpack]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 1119:4-1121:5 -/
def scalar.Scalar.unpack
  (self : scalar.Scalar) : Result backend.serial.u64.scalar.Scalar52 :=
  backend.serial.u64.scalar.Scalar52.from_bytes self.bytes

/- [curve25519_dalek::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::pack]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 1141:4-1145:5 -/
def scalar.Scalar52.pack
  (self : backend.serial.u64.scalar.Scalar52) : Result scalar.Scalar :=
  do
  let a ← backend.serial.u64.scalar.Scalar52.to_bytes self
  ok { bytes := a }

/- [curve25519_dalek::scalar::clamp_integer]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 1386:0-1391:1 -/
def scalar.clamp_integer
  (bytes : Array U8 32#usize) : Result (Array U8 32#usize) :=
  do
  let i ← Array.index_usize bytes 0#usize
  let i1 ← (↑(i &&& 248#u8) : Result U8)
  let bytes1 ← Array.update bytes 0#usize i1
  let i2 ← Array.index_usize bytes1 31#usize
  let i3 ← (↑(i2 &&& 127#u8) : Result U8)
  let bytes2 ← Array.update bytes1 31#usize i3
  let i4 ← Array.index_usize bytes2 31#usize
  let i5 ← (↑(i4 ||| 64#u8) : Result U8)
  Array.update bytes2 31#usize i5

end curve25519_dalek
