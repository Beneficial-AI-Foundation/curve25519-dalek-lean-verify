-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [curve25519_dalek]: function definitions
import Aeneas
import Curve25519Dalek.Types
open Aeneas.Std Result Error
set_option linter.dupNamespace false
set_option linter.hashCommand false
set_option linter.unusedVariables false

namespace curve25519_dalek

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::reduce::LOW_51_BIT_MASK]
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 291:8-291:54 -/
@[global_simps]
def backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK_body
  : Result U64 :=
  do
  let i ← 1#u64 <<< 51#i32
  i - 1#u64
@[global_simps, irreducible]
def backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK : U64 :=
  eval_global
    backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK_body

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::reduce]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 290:4-323:5 -/
def backend.serial.u64.field.FieldElement51.reduce
  (limbs : Array U64 5#usize) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  let i ← Array.index_usize limbs 0#usize
  let c0 ← i >>> 51#i32
  let i1 ← Array.index_usize limbs 1#usize
  let c1 ← i1 >>> 51#i32
  let i2 ← Array.index_usize limbs 2#usize
  let c2 ← i2 >>> 51#i32
  let i3 ← Array.index_usize limbs 3#usize
  let c3 ← i3 >>> 51#i32
  let i4 ← Array.index_usize limbs 4#usize
  let c4 ← i4 >>> 51#i32
  let i5 ←
    (↑(i &&& backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK)
      : Result U64)
  let limbs1 ← Array.update limbs 0#usize i5
  let i6 ← Array.index_usize limbs1 1#usize
  let i7 ←
    (↑(i6 &&& backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK)
      : Result U64)
  let limbs2 ← Array.update limbs1 1#usize i7
  let i8 ← Array.index_usize limbs2 2#usize
  let i9 ←
    (↑(i8 &&& backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK)
      : Result U64)
  let limbs3 ← Array.update limbs2 2#usize i9
  let i10 ← Array.index_usize limbs3 3#usize
  let i11 ←
    (↑(i10 &&&
      backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK) : Result
      U64)
  let limbs4 ← Array.update limbs3 3#usize i11
  let i12 ← Array.index_usize limbs4 4#usize
  let i13 ←
    (↑(i12 &&&
      backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK) : Result
      U64)
  let limbs5 ← Array.update limbs4 4#usize i13
  let i14 ← c4 * 19#u64
  let i15 ← Array.index_usize limbs5 0#usize
  let i16 ← i15 + i14
  let limbs6 ← Array.update limbs5 0#usize i16
  let i17 ← Array.index_usize limbs6 1#usize
  let i18 ← i17 + c0
  let limbs7 ← Array.update limbs6 1#usize i18
  let i19 ← Array.index_usize limbs7 2#usize
  let i20 ← i19 + c1
  let limbs8 ← Array.update limbs7 2#usize i20
  let i21 ← Array.index_usize limbs8 3#usize
  let i22 ← i21 + c2
  let limbs9 ← Array.update limbs8 3#usize i22
  let i23 ← Array.index_usize limbs9 4#usize
  let i24 ← i23 + c3
  let limbs10 ← Array.update limbs9 4#usize i24
  ok limbs10

/- [curve25519_dalek::backend::serial::u64::scalar::{core::ops::index::Index<usize, u64> for curve25519_dalek::backend::serial::u64::scalar::Scalar52}::index]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 43:4-45:5 -/
def
  backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
  (self : backend.serial.u64.scalar.Scalar52) (_index : Usize) : Result U64 :=
  Array.index_usize self _index

/- Trait implementation: [curve25519_dalek::backend::serial::u64::scalar::{core::ops::index::Index<usize, u64> for curve25519_dalek::backend::serial::u64::scalar::Scalar52}]
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 41:0-46:1 -/
@[reducible]
def core.ops.index.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64
  : core.ops.index.Index backend.serial.u64.scalar.Scalar52 Usize U64 := {
  index :=
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
}

/- [curve25519_dalek::backend::serial::u64::scalar::m]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 56:0-58:1 -/
def backend.serial.u64.scalar.m (x : U64) (y : U64) : Result U128 :=
  do
  let i ← (↑(UScalar.cast .U128 x) : Result U128)
  let i1 ← (↑(UScalar.cast .U128 y) : Result U128)
  i * i1

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::mul_internal]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 203:4-217:5 -/
def backend.serial.u64.scalar.Scalar52.mul_internal
  (a : backend.serial.u64.scalar.Scalar52)
  (b : backend.serial.u64.scalar.Scalar52) :
  Result (Array U128 9#usize)
  :=
  do
  let z := Array.repeat 9#usize 0#u128
  let i ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 0#usize
  let i1 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      b 0#usize
  let i2 ← backend.serial.u64.scalar.m i i1
  let z1 ← Array.update z 0#usize i2
  let i3 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      b 1#usize
  let i4 ← backend.serial.u64.scalar.m i i3
  let i5 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 1#usize
  let i6 ← backend.serial.u64.scalar.m i5 i1
  let i7 ← i4 + i6
  let z2 ← Array.update z1 1#usize i7
  let i8 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      b 2#usize
  let i9 ← backend.serial.u64.scalar.m i i8
  let i10 ← backend.serial.u64.scalar.m i5 i3
  let i11 ← i9 + i10
  let i12 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 2#usize
  let i13 ← backend.serial.u64.scalar.m i12 i1
  let i14 ← i11 + i13
  let z3 ← Array.update z2 2#usize i14
  let i15 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      b 3#usize
  let i16 ← backend.serial.u64.scalar.m i i15
  let i17 ← backend.serial.u64.scalar.m i5 i8
  let i18 ← i16 + i17
  let i19 ← backend.serial.u64.scalar.m i12 i3
  let i20 ← i18 + i19
  let i21 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 3#usize
  let i22 ← backend.serial.u64.scalar.m i21 i1
  let i23 ← i20 + i22
  let z4 ← Array.update z3 3#usize i23
  let i24 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      b 4#usize
  let i25 ← backend.serial.u64.scalar.m i i24
  let i26 ← backend.serial.u64.scalar.m i5 i15
  let i27 ← i25 + i26
  let i28 ← backend.serial.u64.scalar.m i12 i8
  let i29 ← i27 + i28
  let i30 ← backend.serial.u64.scalar.m i21 i3
  let i31 ← i29 + i30
  let i32 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 4#usize
  let i33 ← backend.serial.u64.scalar.m i32 i1
  let i34 ← i31 + i33
  let z5 ← Array.update z4 4#usize i34
  let i35 ← backend.serial.u64.scalar.m i5 i24
  let i36 ← backend.serial.u64.scalar.m i12 i15
  let i37 ← i35 + i36
  let i38 ← backend.serial.u64.scalar.m i21 i8
  let i39 ← i37 + i38
  let i40 ← backend.serial.u64.scalar.m i32 i3
  let i41 ← i39 + i40
  let z6 ← Array.update z5 5#usize i41
  let i42 ← backend.serial.u64.scalar.m i12 i24
  let i43 ← backend.serial.u64.scalar.m i21 i15
  let i44 ← i42 + i43
  let i45 ← backend.serial.u64.scalar.m i32 i8
  let i46 ← i44 + i45
  let z7 ← Array.update z6 6#usize i46
  let i47 ← backend.serial.u64.scalar.m i21 i24
  let i48 ← backend.serial.u64.scalar.m i32 i15
  let i49 ← i47 + i48
  let z8 ← Array.update z7 7#usize i49
  let i50 ← backend.serial.u64.scalar.m i32 i24
  Array.update z8 8#usize i50

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::square_internal]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 222:4-241:5 -/
def backend.serial.u64.scalar.Scalar52.square_internal
  (a : backend.serial.u64.scalar.Scalar52) : Result (Array U128 9#usize) :=
  do
  let i ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 0#usize
  let i1 ← i * 2#u64
  let i2 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 1#usize
  let i3 ← i2 * 2#u64
  let i4 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 2#usize
  let i5 ← i4 * 2#u64
  let i6 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 3#usize
  let i7 ← i6 * 2#u64
  let i8 ← backend.serial.u64.scalar.m i i
  let i9 ← Array.index_usize (Array.make 4#usize [ i1, i3, i5, i7 ]) 0#usize
  let i10 ← backend.serial.u64.scalar.m i9 i2
  let i11 ← backend.serial.u64.scalar.m i9 i4
  let i12 ← backend.serial.u64.scalar.m i2 i2
  let i13 ← i11 + i12
  let i14 ← backend.serial.u64.scalar.m i9 i6
  let i15 ← Array.index_usize (Array.make 4#usize [ i1, i3, i5, i7 ]) 1#usize
  let i16 ← backend.serial.u64.scalar.m i15 i4
  let i17 ← i14 + i16
  let i18 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 4#usize
  let i19 ← backend.serial.u64.scalar.m i9 i18
  let i20 ← backend.serial.u64.scalar.m i15 i6
  let i21 ← i19 + i20
  let i22 ← backend.serial.u64.scalar.m i4 i4
  let i23 ← i21 + i22
  let i24 ← backend.serial.u64.scalar.m i15 i18
  let i25 ← Array.index_usize (Array.make 4#usize [ i1, i3, i5, i7 ]) 2#usize
  let i26 ← backend.serial.u64.scalar.m i25 i6
  let i27 ← i24 + i26
  let i28 ← backend.serial.u64.scalar.m i25 i18
  let i29 ← backend.serial.u64.scalar.m i6 i6
  let i30 ← i28 + i29
  let i31 ← Array.index_usize (Array.make 4#usize [ i1, i3, i5, i7 ]) 3#usize
  let i32 ← backend.serial.u64.scalar.m i31 i18
  let i33 ← backend.serial.u64.scalar.m i18 i18
  ok (Array.make 9#usize [ i8, i10, i13, i17, i23, i27, i30, i32, i33 ])

/- [curve25519_dalek::scalar::clamp_integer]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 1386:0-1391:1 -/
def scalar.clamp_integer
  (bytes : Array U8 32#usize) : Result (Array U8 32#usize) :=
  do
  let i ← Array.index_usize bytes 0#usize
  let i1 ← (↑(i &&& 248#u8) : Result U8)
  let bytes1 ← Array.update bytes 0#usize i1
  let i2 ← Array.index_usize bytes1 31#usize
  let i3 ← (↑(i2 &&& 127#u8) : Result U8)
  let bytes2 ← Array.update bytes1 31#usize i3
  let i4 ← Array.index_usize bytes2 31#usize
  let i5 ← (↑(i4 ||| 64#u8) : Result U8)
  Array.update bytes2 31#usize i5

end curve25519_dalek
